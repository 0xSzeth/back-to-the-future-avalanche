// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IInterestOracle__updateAndQueryResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class IInterestOracle extends ethereum.SmartContract {
  static bind(address: Address): IInterestOracle {
    return new IInterestOracle("IInterestOracle", address);
  }

  moneyMarket(): Address {
    let result = super.call("moneyMarket", "moneyMarket():(address)", []);

    return result[0].toAddress();
  }

  try_moneyMarket(): ethereum.CallResult<Address> {
    let result = super.tryCall("moneyMarket", "moneyMarket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  query(): BigInt {
    let result = super.call("query", "query():(uint256)", []);

    return result[0].toBigInt();
  }

  try_query(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("query", "query():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateAndQuery(): IInterestOracle__updateAndQueryResult {
    let result = super.call(
      "updateAndQuery",
      "updateAndQuery():(bool,uint256)",
      []
    );

    return new IInterestOracle__updateAndQueryResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_updateAndQuery(): ethereum.CallResult<
    IInterestOracle__updateAndQueryResult
  > {
    let result = super.tryCall(
      "updateAndQuery",
      "updateAndQuery():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IInterestOracle__updateAndQueryResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }
}

export class UpdateAndQueryCall extends ethereum.Call {
  get inputs(): UpdateAndQueryCall__Inputs {
    return new UpdateAndQueryCall__Inputs(this);
  }

  get outputs(): UpdateAndQueryCall__Outputs {
    return new UpdateAndQueryCall__Outputs(this);
  }
}

export class UpdateAndQueryCall__Inputs {
  _call: UpdateAndQueryCall;

  constructor(call: UpdateAndQueryCall) {
    this._call = call;
  }
}

export class UpdateAndQueryCall__Outputs {
  _call: UpdateAndQueryCall;

  constructor(call: UpdateAndQueryCall) {
    this._call = call;
  }

  get updated(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
