// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DividendWithdrawn extends ethereum.Event {
  get params(): DividendWithdrawn__Params {
    return new DividendWithdrawn__Params(this);
  }
}

export class DividendWithdrawn__Params {
  _event: DividendWithdrawn;

  constructor(event: DividendWithdrawn) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dividendToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get weiAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DividendsDistributed extends ethereum.Event {
  get params(): DividendsDistributed__Params {
    return new DividendsDistributed__Params(this);
  }
}

export class DividendsDistributed__Params {
  _event: DividendsDistributed;

  constructor(event: DividendsDistributed) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dividendToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get weiAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingMultitoken extends ethereum.SmartContract {
  static bind(address: Address): FundingMultitoken {
    return new FundingMultitoken("FundingMultitoken", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DIVIDEND_ROLE(): Bytes {
    let result = super.call("DIVIDEND_ROLE", "DIVIDEND_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DIVIDEND_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DIVIDEND_ROLE",
      "DIVIDEND_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  METADATA_ROLE(): Bytes {
    let result = super.call("METADATA_ROLE", "METADATA_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_METADATA_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "METADATA_ROLE",
      "METADATA_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_BURNER_ROLE(): Bytes {
    let result = super.call(
      "MINTER_BURNER_ROLE",
      "MINTER_BURNER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MINTER_BURNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MINTER_BURNER_ROLE",
      "MINTER_BURNER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accumulativeDividendOf(
    tokenID: BigInt,
    dividendToken: Address,
    _owner: Address
  ): BigInt {
    let result = super.call(
      "accumulativeDividendOf",
      "accumulativeDividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_accumulativeDividendOf(
    tokenID: BigInt,
    dividendToken: Address,
    _owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulativeDividendOf",
      "accumulativeDividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  baseName(): string {
    let result = super.call("baseName", "baseName():(string)", []);

    return result[0].toString();
  }

  try_baseName(): ethereum.CallResult<string> {
    let result = super.tryCall("baseName", "baseName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseSymbol(): string {
    let result = super.call("baseSymbol", "baseSymbol():(string)", []);

    return result[0].toString();
  }

  try_baseSymbol(): ethereum.CallResult<string> {
    let result = super.tryCall("baseSymbol", "baseSymbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deployWrapper(tokenID: BigInt): Address {
    let result = super.call(
      "deployWrapper",
      "deployWrapper(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenID)]
    );

    return result[0].toAddress();
  }

  try_deployWrapper(tokenID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployWrapper",
      "deployWrapper(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployWrapperOnMint(): boolean {
    let result = super.call(
      "deployWrapperOnMint",
      "deployWrapperOnMint():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_deployWrapperOnMint(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deployWrapperOnMint",
      "deployWrapperOnMint():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dividendOf(tokenID: BigInt, dividendToken: Address, _owner: Address): BigInt {
    let result = super.call(
      "dividendOf",
      "dividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_dividendOf(
    tokenID: BigInt,
    dividendToken: Address,
    _owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendOf",
      "dividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dividendTokenDataList(param0: BigInt): Address {
    let result = super.call(
      "dividendTokenDataList",
      "dividendTokenDataList(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_dividendTokenDataList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dividendTokenDataList",
      "dividendTokenDataList(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dividendTokenDataListLength(): BigInt {
    let result = super.call(
      "dividendTokenDataListLength",
      "dividendTokenDataListLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dividendTokenDataListLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendTokenDataListLength",
      "dividendTokenDataListLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dividendTokenToDataID(param0: Address): BigInt {
    let result = super.call(
      "dividendTokenToDataID",
      "dividendTokenToDataID(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_dividendTokenToDataID(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendTokenToDataID",
      "dividendTokenToDataID(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenIDToWrapper(param0: BigInt): Address {
    let result = super.call(
      "tokenIDToWrapper",
      "tokenIDToWrapper(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenIDToWrapper(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenIDToWrapper",
      "tokenIDToWrapper(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyBatch(ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "totalSupplyBatch",
      "totalSupplyBatch(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toBigIntArray();
  }

  try_totalSupplyBatch(ids: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "totalSupplyBatch",
      "totalSupplyBatch(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdrawnDividendOf(
    tokenID: BigInt,
    dividendToken: Address,
    _owner: Address
  ): BigInt {
    let result = super.call(
      "withdrawnDividendOf",
      "withdrawnDividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawnDividendOf(
    tokenID: BigInt,
    dividendToken: Address,
    _owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawnDividendOf",
      "withdrawnDividendOf(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromAddress(dividendToken),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wrapperTemplate(): Address {
    let result = super.call(
      "wrapperTemplate",
      "wrapperTemplate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wrapperTemplate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wrapperTemplate",
      "wrapperTemplate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class DeployWrapperCall extends ethereum.Call {
  get inputs(): DeployWrapperCall__Inputs {
    return new DeployWrapperCall__Inputs(this);
  }

  get outputs(): DeployWrapperCall__Outputs {
    return new DeployWrapperCall__Outputs(this);
  }
}

export class DeployWrapperCall__Inputs {
  _call: DeployWrapperCall;

  constructor(call: DeployWrapperCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeployWrapperCall__Outputs {
  _call: DeployWrapperCall;

  constructor(call: DeployWrapperCall) {
    this._call = call;
  }

  get wrapperAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DistributeDividendsCall extends ethereum.Call {
  get inputs(): DistributeDividendsCall__Inputs {
    return new DistributeDividendsCall__Inputs(this);
  }

  get outputs(): DistributeDividendsCall__Outputs {
    return new DistributeDividendsCall__Outputs(this);
  }
}

export class DistributeDividendsCall__Inputs {
  _call: DistributeDividendsCall;

  constructor(call: DistributeDividendsCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dividendToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DistributeDividendsCall__Outputs {
  _call: DistributeDividendsCall;

  constructor(call: DistributeDividendsCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get dividendTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _wrapperTemplate(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _deployWrapperOnMint(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _baseName(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _baseSymbol(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintBatchCall extends ethereum.Call {
  get inputs(): MintBatchCall__Inputs {
    return new MintBatchCall__Inputs(this);
  }

  get outputs(): MintBatchCall__Outputs {
    return new MintBatchCall__Outputs(this);
  }
}

export class MintBatchCall__Inputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MintBatchCall__Outputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }
}

export class RegisterDividendTokenCall extends ethereum.Call {
  get inputs(): RegisterDividendTokenCall__Inputs {
    return new RegisterDividendTokenCall__Inputs(this);
  }

  get outputs(): RegisterDividendTokenCall__Outputs {
    return new RegisterDividendTokenCall__Outputs(this);
  }
}

export class RegisterDividendTokenCall__Inputs {
  _call: RegisterDividendTokenCall;

  constructor(call: RegisterDividendTokenCall) {
    this._call = call;
  }

  get dividendToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDividendTokenCall__Outputs {
  _call: RegisterDividendTokenCall;

  constructor(call: RegisterDividendTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseNameCall extends ethereum.Call {
  get inputs(): SetBaseNameCall__Inputs {
    return new SetBaseNameCall__Inputs(this);
  }

  get outputs(): SetBaseNameCall__Outputs {
    return new SetBaseNameCall__Outputs(this);
  }
}

export class SetBaseNameCall__Inputs {
  _call: SetBaseNameCall;

  constructor(call: SetBaseNameCall) {
    this._call = call;
  }

  get newValue(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseNameCall__Outputs {
  _call: SetBaseNameCall;

  constructor(call: SetBaseNameCall) {
    this._call = call;
  }
}

export class SetBaseSymbolCall extends ethereum.Call {
  get inputs(): SetBaseSymbolCall__Inputs {
    return new SetBaseSymbolCall__Inputs(this);
  }

  get outputs(): SetBaseSymbolCall__Outputs {
    return new SetBaseSymbolCall__Outputs(this);
  }
}

export class SetBaseSymbolCall__Inputs {
  _call: SetBaseSymbolCall;

  constructor(call: SetBaseSymbolCall) {
    this._call = call;
  }

  get newValue(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseSymbolCall__Outputs {
  _call: SetBaseSymbolCall;

  constructor(call: SetBaseSymbolCall) {
    this._call = call;
  }
}

export class SetDeployWrapperOnMintCall extends ethereum.Call {
  get inputs(): SetDeployWrapperOnMintCall__Inputs {
    return new SetDeployWrapperOnMintCall__Inputs(this);
  }

  get outputs(): SetDeployWrapperOnMintCall__Outputs {
    return new SetDeployWrapperOnMintCall__Outputs(this);
  }
}

export class SetDeployWrapperOnMintCall__Inputs {
  _call: SetDeployWrapperOnMintCall;

  constructor(call: SetDeployWrapperOnMintCall) {
    this._call = call;
  }

  get newValue(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetDeployWrapperOnMintCall__Outputs {
  _call: SetDeployWrapperOnMintCall;

  constructor(call: SetDeployWrapperOnMintCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class WithdrawDividendCall extends ethereum.Call {
  get inputs(): WithdrawDividendCall__Inputs {
    return new WithdrawDividendCall__Inputs(this);
  }

  get outputs(): WithdrawDividendCall__Outputs {
    return new WithdrawDividendCall__Outputs(this);
  }
}

export class WithdrawDividendCall__Inputs {
  _call: WithdrawDividendCall;

  constructor(call: WithdrawDividendCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dividendToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawDividendCall__Outputs {
  _call: WithdrawDividendCall;

  constructor(call: WithdrawDividendCall) {
    this._call = call;
  }
}

export class WithdrawDividendForCall extends ethereum.Call {
  get inputs(): WithdrawDividendForCall__Inputs {
    return new WithdrawDividendForCall__Inputs(this);
  }

  get outputs(): WithdrawDividendForCall__Outputs {
    return new WithdrawDividendForCall__Outputs(this);
  }
}

export class WithdrawDividendForCall__Inputs {
  _call: WithdrawDividendForCall;

  constructor(call: WithdrawDividendForCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dividendToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawDividendForCall__Outputs {
  _call: WithdrawDividendForCall;

  constructor(call: WithdrawDividendForCall) {
    this._call = call;
  }
}

export class WrapperTransferCall extends ethereum.Call {
  get inputs(): WrapperTransferCall__Inputs {
    return new WrapperTransferCall__Inputs(this);
  }

  get outputs(): WrapperTransferCall__Outputs {
    return new WrapperTransferCall__Outputs(this);
  }
}

export class WrapperTransferCall__Inputs {
  _call: WrapperTransferCall;

  constructor(call: WrapperTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WrapperTransferCall__Outputs {
  _call: WrapperTransferCall;

  constructor(call: WrapperTransferCall) {
    this._call = call;
  }
}
