// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EDeposit extends ethereum.Event {
  get params(): EDeposit__Params {
    return new EDeposit__Params(this);
  }
}

export class EDeposit__Params {
  _event: EDeposit;

  constructor(event: EDeposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EFund extends ethereum.Event {
  get params(): EFund__Params {
    return new EFund__Params(this);
  }
}

export class EFund__Params {
  _event: EFund;

  constructor(event: EFund) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundingID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fundAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EPayFundingInterest extends ethereum.Event {
  get params(): EPayFundingInterest__Params {
    return new EPayFundingInterest__Params(this);
  }
}

export class EPayFundingInterest__Params {
  _event: EPayFundingInterest;

  constructor(event: EPayFundingInterest) {
    this._event = event;
  }

  get fundingID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get refundAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERolloverDeposit extends ethereum.Event {
  get params(): ERolloverDeposit__Params {
    return new ERolloverDeposit__Params(this);
  }
}

export class ERolloverDeposit__Params {
  _event: ERolloverDeposit;

  constructor(event: ERolloverDeposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDepositID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ESetParamAddress extends ethereum.Event {
  get params(): ESetParamAddress__Params {
    return new ESetParamAddress__Params(this);
  }
}

export class ESetParamAddress__Params {
  _event: ESetParamAddress;

  constructor(event: ESetParamAddress) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paramName(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newValue(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ESetParamUint extends ethereum.Event {
  get params(): ESetParamUint__Params {
    return new ESetParamUint__Params(this);
  }
}

export class ESetParamUint__Params {
  _event: ESetParamUint;

  constructor(event: ESetParamUint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paramName(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ETopupDeposit extends ethereum.Event {
  get params(): ETopupDeposit__Params {
    return new ETopupDeposit__Params(this);
  }
}

export class ETopupDeposit__Params {
  _event: ETopupDeposit;

  constructor(event: ETopupDeposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EWithdraw extends ethereum.Event {
  get params(): EWithdraw__Params {
    return new EWithdraw__Params(this);
  }
}

export class EWithdraw__Params {
  _event: EWithdraw;

  constructor(event: EWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get early(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get virtualTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DInterest__depositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DInterest__deposit1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DInterest__fundResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DInterest__fund1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DInterest__getDepositResultValue0Struct extends ethereum.Tuple {
  get virtualTokenTotalSupply(): BigInt {
    return this[0].toBigInt();
  }

  get interestRate(): BigInt {
    return this[1].toBigInt();
  }

  get feeRate(): BigInt {
    return this[2].toBigInt();
  }

  get averageRecordedIncomeIndex(): BigInt {
    return this[3].toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get fundingID(): BigInt {
    return this[5].toBigInt();
  }
}

export class DInterest__getFundingResultValue0Struct extends ethereum.Tuple {
  get depositID(): BigInt {
    return this[0].toBigInt();
  }

  get lastInterestPayoutTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get recordedMoneyMarketIncomeIndex(): BigInt {
    return this[2].toBigInt();
  }

  get principalPerToken(): BigInt {
    return this[3].toBigInt();
  }
}

export class DInterest__rolloverDepositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DInterest__rolloverDeposit1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DInterest__surplusResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DInterest extends ethereum.SmartContract {
  static bind(address: Address): DInterest {
    return new DInterest("DInterest", address);
  }

  GlobalDepositCap(): BigInt {
    let result = super.call(
      "GlobalDepositCap",
      "GlobalDepositCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GlobalDepositCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GlobalDepositCap",
      "GlobalDepositCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MaxDepositPeriod(): BigInt {
    let result = super.call(
      "MaxDepositPeriod",
      "MaxDepositPeriod():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_MaxDepositPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MaxDepositPeriod",
      "MaxDepositPeriod():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MinDepositAmount(): BigInt {
    let result = super.call(
      "MinDepositAmount",
      "MinDepositAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MinDepositAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MinDepositAmount",
      "MinDepositAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateInterestAmount(
    depositAmount: BigInt,
    depositPeriodInSeconds: BigInt
  ): BigInt {
    let result = super.call(
      "calculateInterestAmount",
      "calculateInterestAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(depositPeriodInSeconds)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateInterestAmount(
    depositAmount: BigInt,
    depositPeriodInSeconds: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateInterestAmount",
      "calculateInterestAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(depositPeriodInSeconds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(
    depositAmount: BigInt,
    maturationTimestamp: BigInt,
    minimumInterestAmount: BigInt,
    uri: string
  ): DInterest__depositResult {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint64,uint256,string):(uint64,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount),
        ethereum.Value.fromString(uri)
      ]
    );

    return new DInterest__depositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_deposit(
    depositAmount: BigInt,
    maturationTimestamp: BigInt,
    minimumInterestAmount: BigInt,
    uri: string
  ): ethereum.CallResult<DInterest__depositResult> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint64,uint256,string):(uint64,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount),
        ethereum.Value.fromString(uri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__depositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  deposit1(
    depositAmount: BigInt,
    maturationTimestamp: BigInt
  ): DInterest__deposit1Result {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint64):(uint64,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp)
      ]
    );

    return new DInterest__deposit1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_deposit1(
    depositAmount: BigInt,
    maturationTimestamp: BigInt
  ): ethereum.CallResult<DInterest__deposit1Result> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint64):(uint64,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__deposit1Result(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  depositNFT(): Address {
    let result = super.call("depositNFT", "depositNFT():(address)", []);

    return result[0].toAddress();
  }

  try_depositNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("depositNFT", "depositNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositsLength(): BigInt {
    let result = super.call("depositsLength", "depositsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositsLength",
      "depositsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeModel(): Address {
    let result = super.call("feeModel", "feeModel():(address)", []);

    return result[0].toAddress();
  }

  try_feeModel(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeModel", "feeModel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fund(
    depositID: BigInt,
    fundAmount: BigInt,
    minPrincipalFunded: BigInt
  ): DInterest__fundResult {
    let result = super.call(
      "fund",
      "fund(uint64,uint256,uint256):(uint64,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(fundAmount),
        ethereum.Value.fromUnsignedBigInt(minPrincipalFunded)
      ]
    );

    return new DInterest__fundResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_fund(
    depositID: BigInt,
    fundAmount: BigInt,
    minPrincipalFunded: BigInt
  ): ethereum.CallResult<DInterest__fundResult> {
    let result = super.tryCall(
      "fund",
      "fund(uint64,uint256,uint256):(uint64,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(fundAmount),
        ethereum.Value.fromUnsignedBigInt(minPrincipalFunded)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__fundResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  fund1(depositID: BigInt, fundAmount: BigInt): DInterest__fund1Result {
    let result = super.call(
      "fund",
      "fund(uint64,uint256):(uint64,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(fundAmount)
      ]
    );

    return new DInterest__fund1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_fund1(
    depositID: BigInt,
    fundAmount: BigInt
  ): ethereum.CallResult<DInterest__fund1Result> {
    let result = super.tryCall(
      "fund",
      "fund(uint64,uint256):(uint64,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(fundAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__fund1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  fundingListLength(): BigInt {
    let result = super.call(
      "fundingListLength",
      "fundingListLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundingListLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingListLength",
      "fundingListLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingMultitoken(): Address {
    let result = super.call(
      "fundingMultitoken",
      "fundingMultitoken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fundingMultitoken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingMultitoken",
      "fundingMultitoken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeposit(depositID: BigInt): DInterest__getDepositResultValue0Struct {
    let result = super.call(
      "getDeposit",
      "getDeposit(uint64):((uint256,uint256,uint256,uint256,uint64,uint64))",
      [ethereum.Value.fromUnsignedBigInt(depositID)]
    );

    return result[0].toTuple() as DInterest__getDepositResultValue0Struct;
  }

  try_getDeposit(
    depositID: BigInt
  ): ethereum.CallResult<DInterest__getDepositResultValue0Struct> {
    let result = super.tryCall(
      "getDeposit",
      "getDeposit(uint64):((uint256,uint256,uint256,uint256,uint64,uint64))",
      [ethereum.Value.fromUnsignedBigInt(depositID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as DInterest__getDepositResultValue0Struct
    );
  }

  getFunding(fundingID: BigInt): DInterest__getFundingResultValue0Struct {
    let result = super.call(
      "getFunding",
      "getFunding(uint64):((uint64,uint64,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(fundingID)]
    );

    return result[0].toTuple() as DInterest__getFundingResultValue0Struct;
  }

  try_getFunding(
    fundingID: BigInt
  ): ethereum.CallResult<DInterest__getFundingResultValue0Struct> {
    let result = super.tryCall(
      "getFunding",
      "getFunding(uint64):((uint64,uint64,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(fundingID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as DInterest__getFundingResultValue0Struct
    );
  }

  interestModel(): Address {
    let result = super.call("interestModel", "interestModel():(address)", []);

    return result[0].toAddress();
  }

  try_interestModel(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestModel",
      "interestModel():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestOracle(): Address {
    let result = super.call("interestOracle", "interestOracle():(address)", []);

    return result[0].toAddress();
  }

  try_interestOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestOracle",
      "interestOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  moneyMarket(): Address {
    let result = super.call("moneyMarket", "moneyMarket():(address)", []);

    return result[0].toAddress();
  }

  try_moneyMarket(): ethereum.CallResult<Address> {
    let result = super.tryCall("moneyMarket", "moneyMarket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mphMinter(): Address {
    let result = super.call("mphMinter", "mphMinter():(address)", []);

    return result[0].toAddress();
  }

  try_mphMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall("mphMinter", "mphMinter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payInterestToFunders(fundingID: BigInt): BigInt {
    let result = super.call(
      "payInterestToFunders",
      "payInterestToFunders(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(fundingID)]
    );

    return result[0].toBigInt();
  }

  try_payInterestToFunders(fundingID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payInterestToFunders",
      "payInterestToFunders(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(fundingID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rolloverDeposit(
    depositID: BigInt,
    maturationTimestamp: BigInt,
    minimumInterestAmount: BigInt,
    uri: string
  ): DInterest__rolloverDepositResult {
    let result = super.call(
      "rolloverDeposit",
      "rolloverDeposit(uint64,uint64,uint256,string):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount),
        ethereum.Value.fromString(uri)
      ]
    );

    return new DInterest__rolloverDepositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rolloverDeposit(
    depositID: BigInt,
    maturationTimestamp: BigInt,
    minimumInterestAmount: BigInt,
    uri: string
  ): ethereum.CallResult<DInterest__rolloverDepositResult> {
    let result = super.tryCall(
      "rolloverDeposit",
      "rolloverDeposit(uint64,uint64,uint256,string):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount),
        ethereum.Value.fromString(uri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__rolloverDepositResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  rolloverDeposit1(
    depositID: BigInt,
    maturationTimestamp: BigInt
  ): DInterest__rolloverDeposit1Result {
    let result = super.call(
      "rolloverDeposit",
      "rolloverDeposit(uint64,uint64):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp)
      ]
    );

    return new DInterest__rolloverDeposit1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rolloverDeposit1(
    depositID: BigInt,
    maturationTimestamp: BigInt
  ): ethereum.CallResult<DInterest__rolloverDeposit1Result> {
    let result = super.tryCall(
      "rolloverDeposit",
      "rolloverDeposit(uint64,uint64):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(maturationTimestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__rolloverDeposit1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  stablecoin(): Address {
    let result = super.call("stablecoin", "stablecoin():(address)", []);

    return result[0].toAddress();
  }

  try_stablecoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("stablecoin", "stablecoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex(): BigInt {
    let result = super.call(
      "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex",
      "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex",
      "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  surplus(): DInterest__surplusResult {
    let result = super.call("surplus", "surplus():(bool,uint256)", []);

    return new DInterest__surplusResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_surplus(): ethereum.CallResult<DInterest__surplusResult> {
    let result = super.tryCall("surplus", "surplus():(bool,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DInterest__surplusResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  topupDeposit(depositID: BigInt, depositAmount: BigInt): BigInt {
    let result = super.call(
      "topupDeposit",
      "topupDeposit(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(depositAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_topupDeposit(
    depositID: BigInt,
    depositAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topupDeposit",
      "topupDeposit(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(depositAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  topupDeposit1(
    depositID: BigInt,
    depositAmount: BigInt,
    minimumInterestAmount: BigInt
  ): BigInt {
    let result = super.call(
      "topupDeposit",
      "topupDeposit(uint64,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_topupDeposit1(
    depositID: BigInt,
    depositAmount: BigInt,
    minimumInterestAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topupDeposit",
      "topupDeposit(uint64,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(minimumInterestAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDeposit(): BigInt {
    let result = super.call("totalDeposit", "totalDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDeposit", "totalDeposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeOwed(): BigInt {
    let result = super.call("totalFeeOwed", "totalFeeOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFeeOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFeeOwed", "totalFeeOwed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFundedPrincipalAmount(): BigInt {
    let result = super.call(
      "totalFundedPrincipalAmount",
      "totalFundedPrincipalAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFundedPrincipalAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFundedPrincipalAmount",
      "totalFundedPrincipalAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestOwed(): BigInt {
    let result = super.call(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(
    depositID: BigInt,
    virtualTokenAmount: BigInt,
    early: boolean
  ): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint64,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(virtualTokenAmount),
        ethereum.Value.fromBoolean(early)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    depositID: BigInt,
    virtualTokenAmount: BigInt,
    early: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint64,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(virtualTokenAmount),
        ethereum.Value.fromBoolean(early)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CalculateInterestAmountCall extends ethereum.Call {
  get inputs(): CalculateInterestAmountCall__Inputs {
    return new CalculateInterestAmountCall__Inputs(this);
  }

  get outputs(): CalculateInterestAmountCall__Outputs {
    return new CalculateInterestAmountCall__Outputs(this);
  }
}

export class CalculateInterestAmountCall__Inputs {
  _call: CalculateInterestAmountCall;

  constructor(call: CalculateInterestAmountCall) {
    this._call = call;
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositPeriodInSeconds(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CalculateInterestAmountCall__Outputs {
  _call: CalculateInterestAmountCall;

  constructor(call: CalculateInterestAmountCall) {
    this._call = call;
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class DecreaseFeeForDepositCall extends ethereum.Call {
  get inputs(): DecreaseFeeForDepositCall__Inputs {
    return new DecreaseFeeForDepositCall__Inputs(this);
  }

  get outputs(): DecreaseFeeForDepositCall__Outputs {
    return new DecreaseFeeForDepositCall__Outputs(this);
  }
}

export class DecreaseFeeForDepositCall__Inputs {
  _call: DecreaseFeeForDepositCall;

  constructor(call: DecreaseFeeForDepositCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newFeeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseFeeForDepositCall__Outputs {
  _call: DecreaseFeeForDepositCall;

  constructor(call: DecreaseFeeForDepositCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minimumInterestAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fundAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrincipalFunded(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get fundingID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fundingMultitokensMinted(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get actualFundAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get principalFunded(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class Fund1Call extends ethereum.Call {
  get inputs(): Fund1Call__Inputs {
    return new Fund1Call__Inputs(this);
  }

  get outputs(): Fund1Call__Outputs {
    return new Fund1Call__Outputs(this);
  }
}

export class Fund1Call__Inputs {
  _call: Fund1Call;

  constructor(call: Fund1Call) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fundAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Fund1Call__Outputs {
  _call: Fund1Call;

  constructor(call: Fund1Call) {
    this._call = call;
  }

  get fundingID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fundingMultitokensMinted(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get actualFundAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get principalFunded(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _MaxDepositPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _MinDepositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeModel(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _interestModel(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _interestOracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _depositNFT(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _fundingMultitoken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _mphMinter(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PayInterestToFundersCall extends ethereum.Call {
  get inputs(): PayInterestToFundersCall__Inputs {
    return new PayInterestToFundersCall__Inputs(this);
  }

  get outputs(): PayInterestToFundersCall__Outputs {
    return new PayInterestToFundersCall__Outputs(this);
  }
}

export class PayInterestToFundersCall__Inputs {
  _call: PayInterestToFundersCall;

  constructor(call: PayInterestToFundersCall) {
    this._call = call;
  }

  get fundingID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayInterestToFundersCall__Outputs {
  _call: PayInterestToFundersCall;

  constructor(call: PayInterestToFundersCall) {
    this._call = call;
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescueCall extends ethereum.Call {
  get inputs(): RescueCall__Inputs {
    return new RescueCall__Inputs(this);
  }

  get outputs(): RescueCall__Outputs {
    return new RescueCall__Outputs(this);
  }
}

export class RescueCall__Inputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueCall__Outputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class RolloverDepositCall extends ethereum.Call {
  get inputs(): RolloverDepositCall__Inputs {
    return new RolloverDepositCall__Inputs(this);
  }

  get outputs(): RolloverDepositCall__Outputs {
    return new RolloverDepositCall__Outputs(this);
  }
}

export class RolloverDepositCall__Inputs {
  _call: RolloverDepositCall;

  constructor(call: RolloverDepositCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minimumInterestAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class RolloverDepositCall__Outputs {
  _call: RolloverDepositCall;

  constructor(call: RolloverDepositCall) {
    this._call = call;
  }

  get newDepositID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RolloverDeposit1Call extends ethereum.Call {
  get inputs(): RolloverDeposit1Call__Inputs {
    return new RolloverDeposit1Call__Inputs(this);
  }

  get outputs(): RolloverDeposit1Call__Outputs {
    return new RolloverDeposit1Call__Outputs(this);
  }
}

export class RolloverDeposit1Call__Inputs {
  _call: RolloverDeposit1Call;

  constructor(call: RolloverDeposit1Call) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturationTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RolloverDeposit1Call__Outputs {
  _call: RolloverDeposit1Call;

  constructor(call: RolloverDeposit1Call) {
    this._call = call;
  }

  get newDepositID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDepositNFTBaseURICall extends ethereum.Call {
  get inputs(): SetDepositNFTBaseURICall__Inputs {
    return new SetDepositNFTBaseURICall__Inputs(this);
  }

  get outputs(): SetDepositNFTBaseURICall__Outputs {
    return new SetDepositNFTBaseURICall__Outputs(this);
  }
}

export class SetDepositNFTBaseURICall__Inputs {
  _call: SetDepositNFTBaseURICall;

  constructor(call: SetDepositNFTBaseURICall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetDepositNFTBaseURICall__Outputs {
  _call: SetDepositNFTBaseURICall;

  constructor(call: SetDepositNFTBaseURICall) {
    this._call = call;
  }
}

export class SetDepositNFTContractURICall extends ethereum.Call {
  get inputs(): SetDepositNFTContractURICall__Inputs {
    return new SetDepositNFTContractURICall__Inputs(this);
  }

  get outputs(): SetDepositNFTContractURICall__Outputs {
    return new SetDepositNFTContractURICall__Outputs(this);
  }
}

export class SetDepositNFTContractURICall__Inputs {
  _call: SetDepositNFTContractURICall;

  constructor(call: SetDepositNFTContractURICall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetDepositNFTContractURICall__Outputs {
  _call: SetDepositNFTContractURICall;

  constructor(call: SetDepositNFTContractURICall) {
    this._call = call;
  }
}

export class SetFeeModelCall extends ethereum.Call {
  get inputs(): SetFeeModelCall__Inputs {
    return new SetFeeModelCall__Inputs(this);
  }

  get outputs(): SetFeeModelCall__Outputs {
    return new SetFeeModelCall__Outputs(this);
  }
}

export class SetFeeModelCall__Inputs {
  _call: SetFeeModelCall;

  constructor(call: SetFeeModelCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeModelCall__Outputs {
  _call: SetFeeModelCall;

  constructor(call: SetFeeModelCall) {
    this._call = call;
  }
}

export class SetGlobalDepositCapCall extends ethereum.Call {
  get inputs(): SetGlobalDepositCapCall__Inputs {
    return new SetGlobalDepositCapCall__Inputs(this);
  }

  get outputs(): SetGlobalDepositCapCall__Outputs {
    return new SetGlobalDepositCapCall__Outputs(this);
  }
}

export class SetGlobalDepositCapCall__Inputs {
  _call: SetGlobalDepositCapCall;

  constructor(call: SetGlobalDepositCapCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGlobalDepositCapCall__Outputs {
  _call: SetGlobalDepositCapCall;

  constructor(call: SetGlobalDepositCapCall) {
    this._call = call;
  }
}

export class SetInterestModelCall extends ethereum.Call {
  get inputs(): SetInterestModelCall__Inputs {
    return new SetInterestModelCall__Inputs(this);
  }

  get outputs(): SetInterestModelCall__Outputs {
    return new SetInterestModelCall__Outputs(this);
  }
}

export class SetInterestModelCall__Inputs {
  _call: SetInterestModelCall;

  constructor(call: SetInterestModelCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInterestModelCall__Outputs {
  _call: SetInterestModelCall;

  constructor(call: SetInterestModelCall) {
    this._call = call;
  }
}

export class SetInterestOracleCall extends ethereum.Call {
  get inputs(): SetInterestOracleCall__Inputs {
    return new SetInterestOracleCall__Inputs(this);
  }

  get outputs(): SetInterestOracleCall__Outputs {
    return new SetInterestOracleCall__Outputs(this);
  }
}

export class SetInterestOracleCall__Inputs {
  _call: SetInterestOracleCall;

  constructor(call: SetInterestOracleCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInterestOracleCall__Outputs {
  _call: SetInterestOracleCall;

  constructor(call: SetInterestOracleCall) {
    this._call = call;
  }
}

export class SetMPHMinterCall extends ethereum.Call {
  get inputs(): SetMPHMinterCall__Inputs {
    return new SetMPHMinterCall__Inputs(this);
  }

  get outputs(): SetMPHMinterCall__Outputs {
    return new SetMPHMinterCall__Outputs(this);
  }
}

export class SetMPHMinterCall__Inputs {
  _call: SetMPHMinterCall;

  constructor(call: SetMPHMinterCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMPHMinterCall__Outputs {
  _call: SetMPHMinterCall;

  constructor(call: SetMPHMinterCall) {
    this._call = call;
  }
}

export class SetMaxDepositPeriodCall extends ethereum.Call {
  get inputs(): SetMaxDepositPeriodCall__Inputs {
    return new SetMaxDepositPeriodCall__Inputs(this);
  }

  get outputs(): SetMaxDepositPeriodCall__Outputs {
    return new SetMaxDepositPeriodCall__Outputs(this);
  }
}

export class SetMaxDepositPeriodCall__Inputs {
  _call: SetMaxDepositPeriodCall;

  constructor(call: SetMaxDepositPeriodCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxDepositPeriodCall__Outputs {
  _call: SetMaxDepositPeriodCall;

  constructor(call: SetMaxDepositPeriodCall) {
    this._call = call;
  }
}

export class SetMinDepositAmountCall extends ethereum.Call {
  get inputs(): SetMinDepositAmountCall__Inputs {
    return new SetMinDepositAmountCall__Inputs(this);
  }

  get outputs(): SetMinDepositAmountCall__Outputs {
    return new SetMinDepositAmountCall__Outputs(this);
  }
}

export class SetMinDepositAmountCall__Inputs {
  _call: SetMinDepositAmountCall;

  constructor(call: SetMinDepositAmountCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinDepositAmountCall__Outputs {
  _call: SetMinDepositAmountCall;

  constructor(call: SetMinDepositAmountCall) {
    this._call = call;
  }
}

export class SetRewardsCall extends ethereum.Call {
  get inputs(): SetRewardsCall__Inputs {
    return new SetRewardsCall__Inputs(this);
  }

  get outputs(): SetRewardsCall__Outputs {
    return new SetRewardsCall__Outputs(this);
  }
}

export class SetRewardsCall__Inputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsCall__Outputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }
}

export class SkimSurplusCall extends ethereum.Call {
  get inputs(): SkimSurplusCall__Inputs {
    return new SkimSurplusCall__Inputs(this);
  }

  get outputs(): SkimSurplusCall__Outputs {
    return new SkimSurplusCall__Outputs(this);
  }
}

export class SkimSurplusCall__Inputs {
  _call: SkimSurplusCall;

  constructor(call: SkimSurplusCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimSurplusCall__Outputs {
  _call: SkimSurplusCall;

  constructor(call: SkimSurplusCall) {
    this._call = call;
  }
}

export class SurplusCall extends ethereum.Call {
  get inputs(): SurplusCall__Inputs {
    return new SurplusCall__Inputs(this);
  }

  get outputs(): SurplusCall__Outputs {
    return new SurplusCall__Outputs(this);
  }
}

export class SurplusCall__Inputs {
  _call: SurplusCall;

  constructor(call: SurplusCall) {
    this._call = call;
  }
}

export class SurplusCall__Outputs {
  _call: SurplusCall;

  constructor(call: SurplusCall) {
    this._call = call;
  }

  get isNegative(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get surplusAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TopupDepositCall extends ethereum.Call {
  get inputs(): TopupDepositCall__Inputs {
    return new TopupDepositCall__Inputs(this);
  }

  get outputs(): TopupDepositCall__Outputs {
    return new TopupDepositCall__Outputs(this);
  }
}

export class TopupDepositCall__Inputs {
  _call: TopupDepositCall;

  constructor(call: TopupDepositCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TopupDepositCall__Outputs {
  _call: TopupDepositCall;

  constructor(call: TopupDepositCall) {
    this._call = call;
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TopupDeposit1Call extends ethereum.Call {
  get inputs(): TopupDeposit1Call__Inputs {
    return new TopupDeposit1Call__Inputs(this);
  }

  get outputs(): TopupDeposit1Call__Outputs {
    return new TopupDeposit1Call__Outputs(this);
  }
}

export class TopupDeposit1Call__Inputs {
  _call: TopupDeposit1Call;

  constructor(call: TopupDeposit1Call) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minimumInterestAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TopupDeposit1Call__Outputs {
  _call: TopupDeposit1Call;

  constructor(call: TopupDeposit1Call) {
    this._call = call;
  }

  get interestAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get depositID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get virtualTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get early(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawnStablecoinAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
